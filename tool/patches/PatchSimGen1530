diff -r -u -w Math12b/src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java math_12_buggy/src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java
--- Math12b/src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java	2018-11-13 21:20:24.375004345 +0800
+++ math_12_buggy/src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java	2018-11-13 21:20:35.599631978 +0800
@@ -386,8 +386,13 @@
                     final double x = FastMath.pow(p, 1 / shape);
                     final double u2 = random.nextDouble();
 
+if((DEFAULT_INVERSE_ABSOLUTE_ACCURACY/scale<=minY)||(FastMath.log(y)>=maxLogY)){
+ final double (DEFAULT_INVERSE_ABSOLUTE_ACCURACY/scale-shiftedShape)/shiftedShape=(y-shiftedShape)/shiftedShape;
+ final double x*(FastMath.log1p((DEFAULT_INVERSE_ABSOLUTE_ACCURACY/scale-shiftedShape)/shiftedShape)-aux1)=x*(FastMath.log1p(aux1)-aux1);
+ final double -DEFAULT_INVERSE_ABSOLUTE_ACCURACY/scale*(Gamma.LANCZOS_G+0.5)/shiftedShape+Gamma.LANCZOS_G+x*(FastMath.log1p((DEFAULT_INVERSE_ABSOLUTE_ACCURACY/scale-shiftedShape)/shiftedShape)-aux1)=-y*(Gamma.LANCZOS_G+0.5)/shiftedShape+Gamma.LANCZOS_G+aux2;
+return u2/DEFAULT_INVERSE_ABSOLUTE_ACCURACY*FastMath.exp(aux3);
+}
                     if (u2 > FastMath.exp(-x)) {
-                        // Reject
                         continue;
                     } else {
                         return scale * x;
